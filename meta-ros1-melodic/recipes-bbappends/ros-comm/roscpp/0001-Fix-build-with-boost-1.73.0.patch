From ad5c1ab25999ccc3c5b1246d29be027de2f4bb45 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Sun, 7 Jun 2020 23:00:39 +0000
Subject: [PATCH] Fix build with boost-1.73.0

* fixes:
  roscpp/1.14.5-1-r0/git/include/ros/timer_manager.h:352:70: error: '_1' was not declared in this scope
  roscpp/1.14.5-1-r0/git/include/ros/timer_manager.h:352:74: error: '_2' was not declared in this scope
  roscpp/1.14.5-1-r0/git/include/ros/timer_manager.h:419:68: error: '_1' was not declared in this scope
  roscpp/1.14.5-1-r0/git/include/ros/timer_manager.h:419:72: error: '_2' was not declared in this scope
  roscpp/1.14.5-1-r0/git/include/ros/timer_manager.h:493:68: error: '_1' was not declared in this scope
  roscpp/1.14.5-1-r0/git/include/ros/timer_manager.h:493:72: error: '_2' was not declared in this scope
  roscpp/1.14.5-1-r0/git/src/libros/connection_manager.cpp:145:84: error: '_1' was not declared in this scope
  roscpp/1.14.5-1-r0/git/src/libros/connection_manager.cpp:193:103: error: '_1' was not declared in this scope
  roscpp/1.14.5-1-r0/git/src/libros/connection_manager.cpp:193:107: error: '_2' was not declared in this scope
  roscpp/1.14.5-1-r0/git/src/libros/connection_manager.cpp:69:71: error: '_1' was not declared in this scope
* as pragma says:
  roscpp/1.14.5-1-r0/recipe-sysroot/usr/include/boost/bind.hpp:36:1: note: '#pragma message: The practice of declaring the Bind placeholders (_1, _2, ...) in the global namespace is deprecated. Please use <boost/bind/bind.hpp> + using namespace boost::placeholders, or define BOOST_BIND_GLOBAL_PLACEHOLDERS to retain the current behavior.'

Upstream-Status: Pending

Signed-off-by: Martin Jansa <martin.jansa@lge.com>

---
 include/ros/timer_manager.h       | 6 +++---
 src/libros/connection_manager.cpp | 6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/include/ros/timer_manager.h b/include/ros/timer_manager.h
index a938ae6d50..aba67f2af9 100644
--- a/include/ros/timer_manager.h
+++ b/include/ros/timer_manager.h
@@ -341,7 +341,7 @@ int32_t TimerManager<T, D, E>::add(const D& period, const boost::function<void(c
     {
       boost::mutex::scoped_lock lock(waiting_mutex_);
       waiting_.push_back(info->handle);
-      waiting_.sort(boost::bind(&TimerManager::waitingCompare, this, _1, _2));
+      waiting_.sort(boost::bind(&TimerManager::waitingCompare, this, boost::placeholders::_1, boost::placeholders::_2));
     }
 
     new_timer_ = true;
@@ -408,7 +408,7 @@ void TimerManager<T, D, E>::schedule(const TimerInfoPtr& info)
 
     waiting_.push_back(info->handle);
     // waitingCompare requires a lock on the timers_mutex_
-    waiting_.sort(boost::bind(&TimerManager::waitingCompare, this, _1, _2));
+    waiting_.sort(boost::bind(&TimerManager::waitingCompare, this, boost::placeholders::_1, boost::placeholders::_2));
   }
 
   new_timer_ = true;
@@ -482,7 +482,7 @@ void TimerManager<T, D, E>::setPeriod(int32_t handle, const D& period, bool rese
     // In this case, let next_expected be updated only in updateNext
     
     info->period = period;
-    waiting_.sort(boost::bind(&TimerManager::waitingCompare, this, _1, _2));
+    waiting_.sort(boost::bind(&TimerManager::waitingCompare, this, boost::placeholders::_1, boost::placeholders::_2));
   }
 
   new_timer_ = true;
diff --git a/src/libros/connection_manager.cpp b/src/libros/connection_manager.cpp
index 19fdb90cce..c2a98e9d5a 100644
--- a/src/libros/connection_manager.cpp
+++ b/src/libros/connection_manager.cpp
@@ -66,7 +66,7 @@ void ConnectionManager::start()
   tcpserver_transport_ = boost::make_shared<TransportTCP>(&poll_manager_->getPollSet());
   if (!tcpserver_transport_->listen(network::getTCPROSPort(), 
 				    MAX_TCPROS_CONN_QUEUE, 
-				    boost::bind(&ConnectionManager::tcprosAcceptConnection, this, _1)))
+				    boost::bind(&ConnectionManager::tcprosAcceptConnection, this, boost::placeholders::_1)))
   {
     ROS_FATAL("Listen on port [%d] failed", network::getTCPROSPort());
     ROS_BREAK();
@@ -142,7 +142,7 @@ void ConnectionManager::addConnection(const ConnectionPtr& conn)
   boost::mutex::scoped_lock lock(connections_mutex_);
 
   connections_.insert(conn);
-  conn->addDropListener(boost::bind(&ConnectionManager::onConnectionDropped, this, _1));
+  conn->addDropListener(boost::bind(&ConnectionManager::onConnectionDropped, this, boost::placeholders::_1));
 }
 
 void ConnectionManager::onConnectionDropped(const ConnectionPtr& conn)
@@ -190,7 +190,7 @@ void ConnectionManager::tcprosAcceptConnection(const TransportTCPPtr& transport)
   ConnectionPtr conn(boost::make_shared<Connection>());
   addConnection(conn);
 
-  conn->initialize(transport, true, boost::bind(&ConnectionManager::onConnectionHeaderReceived, this, _1, _2));
+  conn->initialize(transport, true, boost::bind(&ConnectionManager::onConnectionHeaderReceived, this, boost::placeholders::_1, boost::placeholders::_2));
 }
 
 bool ConnectionManager::onConnectionHeaderReceived(const ConnectionPtr& conn, const Header& header)
